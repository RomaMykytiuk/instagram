from django.template import loader
from django.contrib import messages
from django.contrib.auth.hashers import make_password
from .forms import UserRegistrationForm,LoginForm,PostForm
from .models import Post,User,Image
from django.shortcuts import render
from django.http import HttpResponse

from django.contrib.auth import login
from django.shortcuts import render, redirect
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.views.generic.edit import CreateView
from django.urls import reverse_lazy


def members(request):
    template = loader.get_template('myfirst.html')
    return HttpResponse(template.render())

def register(request):
    if request.method == "POST":
        form = UserRegistrationForm(request.POST, request.FILES)
        if form.is_valid():
            form.save()
            messages.success(request, 'Account created!')
            return redirect('login')
        else:
            messages.error(request, "–ü–æ–º–∏–ª–∫–∞!")
    else:
        form = UserRegistrationForm()
    return render(request, "register.html", {"form": form})

# def login_view(request):
#     if request.method == 'POST':
#         username = request.POST.get('username')
#         password = request.POST.get('password')  # –î–æ–¥–∞—î–º–æ —Ü—é –∑–º—ñ–Ω–Ω—É
#
#         if username == 'test' and password == 'password123':
#             return HttpResponse("–í–∏ —É—Å–ø—ñ—à–Ω–æ —É–≤—ñ–π—à–ª–∏!")
#         else:
#             return HttpResponse("–ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å!")
#     return render(request, 'login.html')

# def profile_view(request):
#     profile, created = Profile.objects.get_or_create(id=1)
#
#     if request.method == 'POST':
#         form = ProfileForm(request.POST, instance=profile)
#         if form.is_valid():
#             form.save()
#             return redirect('profile')
#     else:
#         form = ProfileForm(instance=profile)
#
#     return render(request, 'profile.html', {'form': form, 'profile': profile})



def login_view(request):
    if request.method == 'POST':
        form = LoginForm(request.POST)
        if form.is_valid():
            user = form.user
            login(request, user)
            messages.success(request,"–í–∏ —É—Å–ø—ñ—à–Ω–æ –£–≤—ñ–π—à–ª–∏!")
            return redirect('profile')
        else: messages.error(request,"–ü–æ–º–∏–ª–∫–∞")
    else:
        form = LoginForm()
    return render(request, 'login.html', {'form': form})


@login_required
def show_profile(request):
    user = request.user
    return render(request, 'profile.html',{'user': user})




def home_view(request):
    posts = [
        {
            'username': '–ì—Ä–∏–≥–æ—Ä—ñ–π',
            'likes': 152,
            'caption': '–ü—Ä–∏—Ä–æ–¥–∞ –£–∫—Ä–∞—ó–Ω–∏!üòç'
        },
        {
            'username': '–î–∞–Ω–∏–ª–æ',
            'likes': 1756,
            'caption': '–Ø –Ω–∞–π–∫—Ä–∞—â–∏–π –≤—á–∏—Ç–µ–ª—å –†–æ–º–∞–Ω–∞!'
        }
        # –î–æ–¥–∞–π—Ç–µ –±—ñ–ª—å—à–µ –ø–æ—Å—Ç—ñ–≤ —Ç—É—Ç
    ]
    return render(request, 'home.html', {'posts': posts})




def create_post_view(request):
    if request.method == 'POST':
        # –õ–æ–≥—ñ–∫–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç–∞
        title = request.POST.get('title')
        content = request.POST.get('content')
        # –ó–±–µ—Ä–µ–∂—ñ—Ç—å –ø–æ—Å—Ç —É –≤–∞—à—ñ–π –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        ...
        return redirect('home')
    context = {}
    return render(request, 'create_post.html', context)



def search_view(request):
    # –õ–æ–≥—ñ–∫–∞ –¥–ª—è –ø–æ—à—É–∫—É
    query = request.GET.get('q')
    results = []
    if query:
        # –í–∏–∫–æ–Ω–∞–π—Ç–µ –ø–æ—à—É–∫ —É –≤–∞—à—ñ–π –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –∞–±–æ —ñ–Ω—à–æ–º—É –¥–∂–µ—Ä–µ–ª—ñ –¥–∞–Ω–∏—Ö
        results = ...  # –ó–∞–º—ñ—Å—Ç—å —Ü—å–æ–≥–æ –¥–æ–¥–∞–π—Ç–µ –≤–∞—à—É –ª–æ–≥—ñ–∫—É –ø–æ—à—É–∫—É
    context = {'results': results, 'query': query}
    return render(request, 'search.html', context)

from django.shortcuts import render

def notifications_view(request):
    # –õ–æ–≥—ñ–∫–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å
    notifications = [
        'Notification 1',
        'Notification 2',
        'Notification 3',
    ]
    context = {'notifications': notifications}
    return render(request, 'notifications.html', context)


# class PostCreateView(CreateView):
#     model = Post
#     form_class = PostForm
#     template_name = 'create_post.html'
#     success_url = reverse_lazy('create_post')
#
#     def form_valid(self, form):
#         post = form.save(commit=False)
#         post.author = self.request.user
#         post.save()
#
#         files = form.cleaned_data.get('images')
#
#
#         for f in files:
#             Image.objects.create(post=self.object, image=f)
#         return super().form_valid(form)
#
#     def form_invalid(self, form):
#         return self.render_to_response(self.get_context_data(form=form))

def create_post(request):
    if request.method == 'POST':
        form = PostForm(request.POST, request.FILES)
        if form.is_valid():
            post = form.save(commit=False)
            post.author = request.user
            post.save()


            images = request.FILES.getlist('images')
            for img in images:
                Image.objects.create(post=post, image=img)

            return redirect('home')
        else:
            return render(request, 'create_post.html', {'form': form})
    else:
        form = PostForm()
        return render(request, 'create_post.html', {'form': form})
